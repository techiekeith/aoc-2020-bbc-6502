HIMEM=&6000
NEW
AUTO
OSFIND=&FFCE
OSBGET=&FFD7
OSFILE=&FFDD
OSRDCH=&FFE0
OSASCI=&FFE3
OSNEWL=&FFE7
OSWRCH=&FFEE
start=&6000
FOR O%=0 TO 2 STEP 2
	P%=&70
	[
	OPT O%
	.print_string_pointer
		EQUW 0 ; 70h

	.filehandle
		EQUB 0 ; 72h

	.padding
		EQUB 0 ; 73h

	.head_pointer
		EQUW 0

	.ints_end
		EQUW 0

	.how_many_ints_to_sum
		EQUB 0
	]
	P%=start
	[
	OPT O%
	.operand1
		EQUD 0

	.operand2
		EQUD 0

	.operand3
		EQUD 0

	.operand4
		EQUD 0

	.result
		EQUD 0

	.dividend
		EQUD 0

	.divisor
		EQUD 0

	.quotient
		EQUD 0

	.remainder
		EQUD 0

	.temp_int32
		EQUD 0

	.output_buffer
		EQUD 0
		EQUD 0
		EQUD 0
		EQUD 0

	.close_file
		LDA #0 ; close file handle
		LDY filehandle
		JMP OSFIND

	.open_file
		LDA #&40 ; open for reading; X and Y contain pointer to filename (X=LSB, Y=MSB)
		JSR OSFIND
		STA filehandle
		BEQ read_file_error
		RTS

	.read_file_error
		BRK
		EQUB 255
		EQUS "Failed to open file"
		EQUB 0

	.add_32bit
		CLC
		LDA operand1
		ADC operand2
		STA result
		LDA operand1 + 1
		ADC operand2 + 1
		STA result + 1
		LDA operand1 + 2
		ADC operand2 + 2
		STA result + 2
		LDA operand1 + 3
		ADC operand2 + 3
		STA result + 3
		RTS

	.add_operand4_result_32bit
		CLC
		LDA operand4
		ADC result
		STA result
		LDA operand4 + 1
		ADC result + 1
		STA result + 1
		LDA operand4 + 2
		ADC result + 2
		STA result + 2
		LDA operand4 + 3
		ADC result + 3
		STA result + 3
		RTS

	.sub_32bit
		SEC
		LDA operand1
		SBC operand2
		STA result
		LDA operand1 + 1
		SBC operand2 + 1
		STA result + 1
		LDA operand1 + 2
		SBC operand2 + 2
		STA result + 2
		LDA operand1 + 3
		SBC operand2 + 3
		STA result + 3
		RTS

	.asl_operand1_32bit
		ASL operand1
		ROL operand1 + 1
		ROL operand1 + 2
		ROL operand1 + 3
		RTS

	.asl_operand4_32bit
		ASL operand4
		ROL operand4 + 1
		ROL operand4 + 2
		ROL operand4 + 3
		RTS

	.lsr_operand3_32bit
		LSR operand3 + 3
		ROR operand3 + 2
		ROR operand3 + 1
		ROR operand3
		RTS

	.copy_operand1_to_operand2
		LDA operand1
		STA operand2
		LDA operand1 + 1
		STA operand2 + 1
		LDA operand1 + 2
		STA operand2 + 2
		LDA operand1 + 3
		STA operand2 + 3
		RTS

	.copy_operand1_to_operand4
		LDA operand1
		STA operand4
		LDA operand1 + 1
		STA operand4 + 1
		LDA operand1 + 2
		STA operand4 + 2
		LDA operand1 + 3
		STA operand4 + 3
		RTS

	.copy_operand2_to_operand3
		LDA operand2
		STA operand3
		LDA operand2 + 1
		STA operand3 + 1
		LDA operand2 + 2
		STA operand3 + 2
		LDA operand2 + 3
		STA operand3 + 3
		RTS

	.copy_result_to_operand1
		LDA result
		STA operand1
		LDA result + 1
		STA operand1 + 1
		LDA result + 2
		STA operand1 + 2
		LDA result + 3
		STA operand1 + 3
		RTS

	.multiply_by_ten_32bit
		JSR asl_operand1_32bit
		JSR copy_operand1_to_operand2
		JSR asl_operand1_32bit
		JSR asl_operand1_32bit
		JMP add_32bit

	.multiply_32bit
		LDY #32
		LDA #0
		STA result
		STA result + 1
		STA result + 2
		STA result + 3
		JSR copy_operand1_to_operand4
		JSR copy_operand2_to_operand3
	.multiply_32bit_loop
		JSR lsr_operand3_32bit
		BCC multiply_32bit_loop_end
		JSR add_operand4_result_32bit
	.multiply_32bit_loop_end
		JSR asl_operand4_32bit
		DEY
		CPY #0
		BNE multiply_32bit_loop
		RTS

	.divide_32bit
		LDA #0
		STA quotient
		STA quotient + 1
		STA quotient + 2
		STA quotient + 3
		STA remainder
		STA remainder + 1
		STA remainder + 2
		STA remainder + 3
		LDY #32
	.divide_for_loop
		ASL dividend
		ROL dividend + 1
		ROL dividend + 2
		ROL dividend + 3
		ROL remainder
		ROL remainder + 1
		ROL remainder + 2
		ROL remainder + 3
		SEC
		LDA remainder + 3
		SBC divisor + 3
		BCC divide_next
		STA temp_int32 + 3
		LDA remainder + 2
		SBC divisor + 2
		BCC divide_next
		STA temp_int32 + 2
		LDA remainder + 1
		SBC divisor + 1
		BCC divide_next
		STA temp_int32 + 1
		LDA remainder
		SBC divisor
		BCC divide_next
		STA remainder
		LDA temp_int32 + 1
		STA remainder + 1
		LDA temp_int32 + 2
		STA remainder + 2
		LDA temp_int32 + 3
		STA remainder + 3
		SEC
	.divide_next
		ROL quotient
		ROL quotient + 1
		ROL quotient + 2
		ROL quotient + 3
		DEY
		BNE divide_for_loop
		RTS

	.print_decimal_result_32bit
		LDA result + 3
		STA dividend + 3
		LDA result + 2
		STA dividend + 2
		LDA result + 1
		STA dividend + 1
		LDA result
		STA dividend
		LDX #0
		STX divisor + 1
		STX divisor + 2
		STX divisor + 3
		STX output_buffer + 10
		LDA #32
	.init_output_buffer_loop
		STA output_buffer, X
		INX
		CPX #10
		BNE init_output_buffer_loop
		STX divisor
	.print_decimal_result_32bit_loop
		JSR divide_32bit
		LDA quotient + 3
		STA dividend + 3
		LDA quotient + 2
		STA dividend + 2
		LDA quotient + 1
		STA dividend + 1
		LDA quotient
		STA dividend
		LDA remainder
		ORA #48
		DEX
		STA output_buffer, X
		LDA quotient
		ORA quotient + 1
		ORA quotient + 2
		ORA quotient + 3
		BEQ output_decimal
		CPX #0
		BNE print_decimal_result_32bit_loop
	.output_decimal
		LDX #0
	.output_decimal_loop
		LDA output_buffer, X
		JSR OSWRCH
		INX
		CPX #10
		BNE output_decimal_loop
		RTS

	.print_hex_result_32bit
		LDA result + 3
		JSR print_hex_8bit
		LDA result + 2
		JSR print_hex_8bit
		LDA result + 1
		JSR print_hex_8bit
		LDA result
		JMP print_hex_8bit

	.print_hex_16bit
		TYA
		JSR print_hex_8bit
		TXA

	.print_hex_8bit
		PHA
		LSR A
		LSR A
		LSR A
		LSR A
		JSR print_digit
		PLA
		AND #15

	.print_digit
		ORA #48
		CMP #58
		BCC print_this_char
		ADC #6

	.print_this_char
		JMP OSWRCH

	.print_string
		PLA
		STA print_string_pointer
		PLA
		STA print_string_pointer + 1
		LDY #1
	.print_string_loop
		LDA (print_string_pointer), Y
		BEQ print_string_return
		JSR OSWRCH
		INY
		BNE print_string_loop
	.print_string_return
		CLC
		TYA
		ADC print_string_pointer
		STA print_string_pointer
		LDA #0
		ADC print_string_pointer + 1
		PHA
		LDA print_string_pointer
		PHA
		RTS

	.head
		EQUD 0
	.required_sum
		EQUD 0
	.filename
		EQUS "T.DAY01" ; EQUS "A.DAY01"
		EQUB 13
	.input_buffer
		EQUD 0
		EQUD 0
		EQUD 0
		EQUD 0
	
	.read_ints
		LDX #0

	.read_int_loop
		LDY filehandle
		JSR OSBGET
		BCC read_byte
		RTS ; reached EOF
	.read_byte
		CMP #13
		BEQ read_int_skip
		CMP #10
		BEQ parse_int
		BNE read_int_skip2
	.read_int_skip
		LDA #0
	.read_int_skip2
		STA input_buffer, X
		INX
		BNE read_int_loop
	
	.parse_int
		LDA #0
		STA operand1
		STA operand1 + 1
		TAX
		LDA input_buffer, X
		BEQ read_ints

	.parse_int_loop
		AND #15
		PHA
		JSR multiply_by_ten_32bit
		JSR copy_result_to_operand1
		PLA
		STA operand2
		LDA #0
		STA operand2 + 1
		STA operand2 + 2
		STA operand2 + 3
		JSR add_32bit
		JSR copy_result_to_operand1
		INX
		LDA input_buffer, X
		BNE parse_int_loop
	
	.store_int
		LDY #0
		LDA operand1
		STA (ints_end), Y
		LDA operand1 + 1
		INY
		STA (ints_end), Y
		CLC
		LDA ints_end
		ADC #2
		STA ints_end
		BCC read_next_int
		LDA ints_end + 1
		ADC #0
		STA ints_end + 1
		BPL read_next_int
		RTS ; if we get here, we are out of RAM
	
	.read_next_int
		JMP read_ints

	.solve
		LDA #0
		STA result
		STA result + 1
		STA result + 2
		STA result + 3
		LDA how_many_ints_to_sum
		CMP #0
		BEQ solve_exit
		LDA head_pointer
		CMP ints_end
		BNE load_head
		LDA head_pointer + 1
		CMP ints_end + 1
		BNE load_head
	.solve_exit
		RTS
	.load_head
		LDY #0
		LDA (head_pointer), Y
		STA head
		INY
		LDA (head_pointer), Y
		STA head + 1
		CLC
		LDA head_pointer ; tail
		ADC #2
		STA head_pointer
		LDA head_pointer + 1
		ADC #0
		STA head_pointer + 1
		LDA how_many_ints_to_sum
		CMP #1
		BNE solve_more_than_one

		LDX head
		CPX required_sum
		BNE solve
		LDY head + 1
		CPY required_sum + 1
		BNE solve
		STX result
		STY result + 1
		LDA #0
		STA result + 2
		STA result + 3
		RTS

	.solve_more_than_one
		LDA how_many_ints_to_sum
		PHA
		LDA required_sum
		PHA
		LDA required_sum + 1
		PHA
		LDA required_sum + 2
		PHA
		LDA required_sum + 3
		PHA
		LDA head
		PHA
		LDA head + 1
		PHA
		LDA head + 2
		PHA
		LDA head + 3
		PHA
		LDA head_pointer
		PHA
		LDA head_pointer + 1
		PHA

		DEC how_many_ints_to_sum
		SEC
		LDA required_sum
		SBC head
		STA required_sum
		LDA required_sum + 1
		SBC head + 1
		STA required_sum + 1
		LDA required_sum + 2
		SBC head + 2
		STA required_sum + 2
		LDA required_sum + 3
		SBC head + 3
		STA required_sum + 3
		BMI skip_solve_call
		ORA required_sum + 2
		ORA required_sum + 1
		ORA required_sum
		CMP #0
		BEQ skip_solve_call
		
		JSR solve

	.skip_solve_call
		PLA
		STA head_pointer + 1
		PLA
		STA head_pointer
		PLA
		STA head + 3
		PLA
		STA head + 2
		PLA
		STA head + 1
		PLA
		STA head
		PLA
		STA required_sum + 3
		PLA
		STA required_sum + 2
		PLA
		STA required_sum + 1
		PLA
		STA required_sum
		PLA
		STA how_many_ints_to_sum
	
		LDA result ; is result zero?
		ORA result + 1
		ORA result + 2
		ORA result + 3
		CMP #0
		BNE multiply_head_by_result
		JMP solve
	
	.multiply_head_by_result
		LDA result + 3
		STA operand1 + 3
		LDA result + 2
		STA operand1 + 2
		LDA result + 1
		STA operand1 + 1
		LDA result
		STA operand1
		LDA head + 3
		STA operand2 + 3
		LDA head + 2
		STA operand2 + 2
		LDA head + 1
		STA operand2 + 1
		LDA head
		STA operand2
		JMP multiply_32bit
	
	.run
		LDA #ints MOD 256
		STA head_pointer
		STA ints_end
		LDA #ints DIV 256
		STA head_pointer + 1
		STA ints_end + 1
		
		LDX #filename MOD 256
		LDY #filename DIV 256
		JSR open_file

		JSR read_ints

		JSR close_file
		
		LDA #228
		STA required_sum
		LDA #7
		STA required_sum + 1
		LDA #0
		STA required_sum + 2
		STA required_sum + 3 ; required sum is 2020 (7E4h)

		LDA #2
		STA how_many_ints_to_sum
		JSR solve
		JSR print_string
		EQUS "Part 1 result: "
		BRK
		JSR print_decimal_result_32bit
		JSR OSNEWL
	
		LDA #ints MOD 256
		STA head_pointer
		LDA #ints DIV 256
		STA head_pointer + 1

		LDA #3
		STA how_many_ints_to_sum
		JSR solve
		JSR print_string
		EQUS "Part 2 result: "
		BRK
		JSR print_decimal_result_32bit
		JMP OSNEWL

	.ints
		EQUW 0
	.end
	]
NEXT
END

DEF PROCtest
PRINT "No tests specified; please write some!"
ENDPROC

DEF PROCsave
A%=0
B%=&41C0000
C%=start
D%=run
E%=start
F%=end
X%=10
Y%=4
$&41C="DAY01"
CALL OSFILE
ENDPROC
