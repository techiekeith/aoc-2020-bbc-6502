HIMEM=&4000
NEW
AUTO
REM Operating system variables

OSFIND=&FFCE
OSGBPB=&FFD1
OSBPUT=&FFD4
OSBGET=&FFD7
OSARGS=&FFDA
OSFILE=&FFDD
OSRDCH=&FFE0
OSASCI=&FFE3
OSNEWL=&FFE7
OSWRCH=&FFEE

REM Useful math library variables

math_library_start=&7800
set_integer_width=math_library_start
add=math_library_start + 3
subtract=math_library_start + 6
multiply=math_library_start + 9
divide=math_library_start + 12
print_string=math_library_start + 15
print_decimal=math_library_start + 18
print_hex=math_library_start + 21
print_hex_16bit=math_library_start + 24
print_hex_8bit=math_library_start + 27
operand1=math_library_start + &20
dividend=operand1
operand2=math_library_start + &28
divisor=operand2
result=math_library_start + &30
quotient=result
remainder=math_library_start + &38

integer_width=4

start=&7000
buffer=&7700
ptr=&8A

$DAY="04"

FOR N%=0 TO 2 STEP 2
	P%=start
	[
		OPT N%
		.math_filename
			EQUS "L.MATH"
			EQUB 13
		.test_filename
			EQUS "T.DAY"
			EQUS $DAY
			EQUB 13
		.real_filename
			EQUS "A.DAY"
			EQUS $DAY
			EQUB 13
		.math_osfile_block
			EQUW math_filename
			EQUD math_library_start
			EQUD 0
			EQUD 0
			EQUD 0
		.osgbpb_block
		.file_handle
			EQUB 0
			EQUD 0
			EQUD 1 ; number of bytes to transfer
			EQUD 0
		.data
		.columns
			EQUD 0
		.rows
			EQUD 0
		.column
			EQUD 0
		.row
			EQUD 0
		.right
			EQUB 0
		.down
			EQUB 0
		.trees
			EQUD 0
		.results
		.part1_result
			EQUD 0
		.part2_result
			EQUD 0

		.test
			LDX #test_filename MOD 256
			LDY #test_filename DIV 256
			JMP open_file
		.run
			LDX #real_filename MOD 256
			LDY #real_filename DIV 256
		.open_file
			LDA #&40 ; open for reading
			JSR OSFIND
			STA file_handle ; file handle
			TAY

		.load_math_library
			LDA #255
			LDX #math_osfile_block MOD 256
			LDY #math_osfile_block DIV 256
			JSR OSFILE
			LDA #integer_width ; 32-bit integers
			JSR set_integer_width

		.init_results
			LDA #0
			TAX
		.init_results_loop
			STA data, X
			INX
			CPX #(test - data)
			BNE init_results_loop

		.reset_buffer_pointer
			LDA #buffer MOD 256
			STA ptr
			LDA #buffer DIV 256
			STA ptr + 1

		.read_file
			LDY file_handle
			JSR OSBGET
			BCS close_file
			CMP #10
			BEQ end_line
			CMP #13
			BEQ read_file
			LDY #0
			STA (ptr), Y
			INC ptr
			BNE read_file
			INC ptr + 1
			BNE read_file
			BEQ close_file
		.end_line
			NOP ; parse line here
			JMP read_file

		.close_file
			LDA #0
			LDY file_handle
			JSR OSFIND

			NOP ; do the work here
		
		.print_results
			JSR print_string
			EQUS "Part 1: "
			EQUB 0
			LDX #part1_result MOD 256
			LDY #part1_result DIV 256
			JSR print_decimal
			JSR print_string
			EQUB 13
			EQUB 10
			EQUS "Part 2: "
			EQUB 0
			LDX #part2_result MOD 256
			LDY #part2_result DIV 256
			JSR print_decimal
			JMP OSNEWL
		
		.end
	]
NEXT
END

DEF PROCtest
CALL test
ENDPROC

DEF PROCsave
A%=0
B%=&41C0000
C%=start
D%=run
E%=start
F%=end
X%=10
Y%=4
$&41C="DAY" + $DAY
CALL OSFILE
ENDPROC
